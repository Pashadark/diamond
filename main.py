#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# –ò–º–ø–æ—Ä—Ç—ã
import sys
import telebot
from telebot import types
import time
import config
import keyboard
import logging
from string import Template
import requests

# –¢–æ–∫–µ–Ω—ã
bot = telebot.TeleBot(config.token)

# –õ–æ–≥–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


user_dict = {}


# –ö–ª–∞—Å—Å—ã
class User:
    def __init__(self, category):
        self.category = category

        keys = ['fullname', 'phone', 'address', 'message', 'end', 'serial']

        for key in keys:
            self.key = None

# –¢—É—Ç —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–º–∞–Ω–¥–æ–π /start
@bot.message_handler(commands=['start'])
def command_hello(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —è —Ä–∞–±–æ—Ç–∞—é —Ç–∞–∫, –∫–∞–∫ –Ω–∞–¥–æü§©", markup=keyboard.keyboard1)

# –¢—É—Ç —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–º–∞–Ω–¥–æ–π /help
@bot.message_handler(commands=['help'])
def welcome_help(message):
    bot.send_message(message.chat.id, '–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?')

@bot.message_handler(commands=['ping'])
def ping(message):

    nowtime = time.time()
    uptime = round(nowtime - runtime)
    uptimestr = str(time.strftime("%H:%M:%S", time.gmtime(int(uptime))))
    answertime = nowtime - message.date
    nowtimestr = time.ctime(nowtime)
    status = bot.get_webhook_info().pending_update_count - 1
    msgg = bot.reply_to(message,'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: '+ str(nowtimestr) + '\n–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –∑–∞: ' + str(answertime) + '\n –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω —É–∂–µ: ' + str(uptimestr)  + '\n–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: ' + str(status),  parse_mode='html')


@bot.message_handler(commands=['barber'])
def user_reg(message):
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞', reply_markup=keyboard.barber)
    bot.register_next_step_handler(msg, process_category_step)


def process_category_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User (message.text)
        # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardRemove (selective=False)

        msg = bot.send_message (message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –æ–∫–∞–∑–∞–Ω–Ω—É—é –º–∞—Å—Ç–µ—Ä–æ–º', reply_markup=keyboard.service)
        bot.register_next_step_handler (msg, process_end_step)

    except Exception as e:
        bot.reply_to (message, 'ooops!!')


def process_end_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.end = message.text

        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message (chat_id, getRegData (user, '–ú—ã –≤—Å–µ —É—á–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º...', message.from_user.first_name),
                          parse_mode="Markdown", reply_markup=keyboard.keyboard1)
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
        bot.send_message (config.chat_id, getRegData (user, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç', bot.get_me ().username),
                          parse_mode="Markdown")

    except Exception as e:
        bot.reply_to (message, 'ooops!!')


# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ Template
# –≤ send_message –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å parse_mode="Markdown"
def getRegData(user, title, name):
    t = Template (
        '$title *$name* \n\n –ë–∞—Ä–±–µ—Ä: *$category* \n –£—Å–ª—É–≥–∞: *$end*')

    return t.substitute ({
        'title': title,
        'name': name,
        'category': user.category,
        'end': user.end,
    })
    # Enable saving next step handlers to file "./.handlers-saves/step.save".
    # Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
    # saving will hapen after delay 2 seconds.
    bot.enable_save_next_step_handlers (delay=2)

    # Load next_step_handlers from save file (default "./.handlers-saves/step.save")
    # WARNING It will work only if enable_save_next_step_handlers was called!
    bot.load_next_step_handlers ()


# –†–µ–±—É—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
while True:
    try:
        bot.polling (none_stop=True)
    except:
        print ('–û—à–∏–±–∫–∞! –ü—Ä–æ–±—É—é –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä...')
        time.sleep (1)
        print ('1')
        time.sleep (1)
        print ('2')
        time.sleep (1)
        print ('3')
        time.sleep (1)
        print ('4')
        time.sleep (1)
        print ('5')
        time.sleep (1)
        logging.error ('error: {}'.format (sys.exc_info ()[0]))
        time.sleep (3)
