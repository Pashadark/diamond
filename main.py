#!/usr/bin/env python3
# -*- coding: utf-8 -*-

########################################
# Telegram bot Diamond version 0.0.3   #
# programming and created by @pashadark#
########################################

# –ò–º–ø–æ—Ä—Ç—ã
import sys

import telebot
from telebot import types
import time
import datetime
import config
import keyboard
import logging
from string import Template
import tg_analytic
import datetime as DT
import pytz
import requests

# –í–∫–ª—é—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)


# –¢–æ–∫–µ–Ω—ã
bot = telebot.TeleBot(config.token)
# –ê—Ç—Ä–∏–±—É—Ç—ã
now = datetime.datetime.today()
# –ö–ª–∞—Å—Å—ã
user_dict = {}


class User:
    def __init__(self, category):
        self.category = category

        keys = ['fullname', 'phone', 'address', 'message', 'head', 'beard']

        for key in keys:
            self.key = None

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id,
                      '1) –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–∂–º–∏—Ç–µ /start\n' +
                      '2) –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /admin\n' +
                      '3) –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ /commands\n' +
                      '4) –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ /time \n' +
                      '5) –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ‚§µ',
                      reply_markup=keyboard.keyboardhelp)

@bot.message_handler(commands=['time'])
def time_command(message):
    bot.send_message(message.chat.id, '–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n' + now.strftime("%m/%d/%Y, %H:%M:%S"))

bot.message_handler (commands=['list'])
def list_command(message):
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')


@bot.message_handler (commands=['admin'])
def start_message(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')


@bot.message_handler(commands=['start', 'help'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç–∞—é. \n–ë—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–∂–º–∏ /help',
                      reply_markup=keyboard.keyboard1)


@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.text[:10] == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or message.text[:10] == 'C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        st = message.text.split(' ')
        if 'txt' in st or '—Ç—Ö—Ç' in st:
            tg_analytic.analysis(st,message.chat.id)
            with open('%s.txt' %message.chat.id ,'r',encoding='UTF-8') as file:
                bot.send_document(message.chat.id,file)
            tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(st,message.chat.id)
            bot.send_message(message.chat.id, messages)

    if message.text == '‚úÇ–ë–∞—Ä–±–µ—Ä':
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(1)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞', reply_markup=keyboard.barber)
        bot.register_next_step_handler(msg, process_category_step)

def process_category_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(1)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É 1', reply_markup=keyboard.service1)
        tg_analytic.statistics (message.chat.id, message.text)
        bot.register_next_step_handler(msg, process_head_step)

    except Exception as e:
        bot.reply_to(message, '‚ö† –û—à–∏–±–∫–∞, –º—ã –∏—Å–ø—Ä–∞–≤–∏–º')

def process_head_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.head = message.text
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(1)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É 2', reply_markup=keyboard.service2)
        tg_analytic.statistics (message.chat.id, message.text)
        bot.register_next_step_handler(msg, process_beard_step)

    except Exception as e:
        bot.reply_to(message, '‚ö† –û—à–∏–±–∫–∞, –º—ã –∏—Å–ø—Ä–∞–≤–∏–º')


def process_beard_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.beard = message.text
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(1)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É 3', reply_markup=keyboard.service3)
        tg_analytic.statistics (message.chat.id, message.text)
        bot.register_next_step_handler(msg, process_end_step)

    except Exception as e:
        bot.reply_to(message, '‚ö† –û—à–∏–±–∫–∞, –º—ã –∏—Å–ø—Ä–∞–≤–∏–º')


def process_end_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.end = message.text

        # –ì–æ–≤–æ—Ä–∏–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        bot.send_chat_action(message.chat.id, 'typing')
        time.sleep(1)
        bot.send_message(chat_id, getRegData(user, '–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º...', message.from_user.first_name),
                          parse_mode="Markdown")
        time.sleep(2)
        bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ', reply_markup=keyboard.keyboard1)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        bot.send_message(config.chat_id, getRegData(user, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç', bot.get_me().username),
                          parse_mode="Markdown")


    except Exception as e:
        bot.reply_to(message, '‚ö†–û—à–∏–±–∫–∞, –º—ã –∏—Å–ø—Ä–∞–≤–∏–º')


# –§–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def getRegData(user, title, name):
    t = Template(
        '$title *$name* \n\n üßî–ë–∞—Ä–±–µ—Ä: *$category* \n\n ‚úÇ–ì–æ–ª–æ–≤–∞: *$head* \n ‚úÇ–ë–æ—Ä–æ–¥–∞: *$beard* \n ‚úÇ–õ–∏—Ü–æ: *$end* \n ‚åö–î–∞—Ç–∞: *$data*')

    return t.substitute({
        'title': title,
        'name': name,
        'category': user.category,
        'head': user.head,
        'beard': user.beard,
        'end': user.end,
        'data': now.strftime("%d/%m/%Y")
    })
    # Enable saving next step handlers to file "./.handlers-saves/step.save".
    # Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
    # saving will hapen after delay 2 seconds.
    bot.enable_save_next_step_handlers (delay=2)

    # Load next_step_handlers from save file (default "./.handlers-saves/step.save")
    # WARNING It will work only if enable_save_next_step_handlers was called!
    bot.load_next_step_handlers ()

# –†–µ–±—É—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
while True:
    try:
        bot.polling(none_stop=True)
    except:
        print('–û—à–∏–±–∫–∞! –ü—Ä–æ–±—É—é –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä...')
        time.sleep(1)
        print('–ó–∞–≥—Ä—É–∑–∫–∞... ‚ñà 15%')
        time.sleep(1)
        print('–ó–∞–≥—Ä—É–∑–∫–∞... ‚ñà‚ñà‚ñà 30%')
        time.sleep(1)
        print('–ó–∞–≥—Ä—É–∑–∫–∞... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 45%')
        time.sleep (1)
        print('–ó–∞–≥—Ä—É–∑–∫–∞... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 60%')
        time.sleep (1)
        print('–ó–∞–≥—Ä—É–∑–∫–∞... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%')
        time.sleep(4)
        logging.error('error: {}'.format(sys.exc_info()[0]))
        time.sleep(4)
